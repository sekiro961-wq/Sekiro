#include <iostream>
#include <fstream>
#include <cstring>
#include <cstdlib>
#include <cctype>
#include <iomanip>
using namespace std;

const int MAX_LOPSV = 10000;
//Môn học
struct MonHoc {
	char MAMH[11] ; char TENMH[51] , 
	int STCLT ,STCTH; int height;
};
struct nodeMH {
	MonHoc mh;
	nodeMH *left, *right;
};
typedef nodeMH* treeMH;

//====Sinh viên====
struct SinhVien {
	char MASV[16];
	char HO[51];
	char TEN[11];
	char PHAI[4];
	char SODT[16];
	char Email[50];
};
struct nodeSV {
	SinhVien sv;
	nodeSV *next;
};
typedef nodeSV* PTRSV;
//Tạo node sv
nodeSV* TaoNodeSV(SinhVien sv) {
	nodeSV* p = new nodeSV;
	p->sv = sv;
	p->next = NULL;
	return p;
}
//Tìm sv theo mã
nodeSV* TimKiemSV(PTRSV First, const char* masv) {
	for (nodeSV* p = First; p != NULL; p = p->next)
		if (strcmp(p->sv.MASV, masv) == 0) return p;
	return NULL;
}
//Thêm sv vào ds
void ThemSV(PTRSV &First, SinhVien sv) {
	nodeSV* p = TaoNodeSV(sv);
	if (First == NULL) {
		First = p;
		return;
	}
	nodeSV* q = First;
	while (q->next != NULL) q = q->next;
	q->next = p;
}
//Xóa sinh viên theo mã trong lớp
bool XoaSV(PTRSV &First, const char* masv) {
	nodeSV* p = First, *prev = NULL;
	while (p != NULL && strcmp(p->sv.MASV, masv) != 0) {
		prev = p; p = p->next;
	}
	if (p == NULL) return false; // không thấy
	if (prev == NULL) First = p->next;
	else prev->next = p->next;
	delete p;
	return true;
}
//Hiệu chỉnh sinh viên
bool HieuChinhSV(PTRSV &First, const char* masv) {
	nodeSV* p = TimKiemSV(First, masv);
	if (p == NULL) return false;
	cout << "Nhap ho moi (bo trong neu giu nguyen): ";
	char tmp[51]; cin.getline(tmp, 51);
	if (strlen(tmp) > 0) strcpy(p->sv.HO, tmp);

	cout << "Nhap ten moi (bo trong neu giu nguyen): ";
	cin.getline(tmp, 11);
	if (strlen(tmp) > 0) strcpy(p->sv.TEN, tmp);

	cout << "Nhap phai moi (bo trong neu giu nguyen): ";
	cin.getline(tmp, 4);
	if (strlen(tmp) > 0) strcpy(p->sv.PHAI, tmp);

	cout << "Nhap SDT moi (bo trong neu giu nguyen): ";
	cin.getline(tmp, 16);
	if (strlen(tmp) > 0) strcpy(p->sv.SODT, tmp);

	cout << "Nhap email moi (bo trong neu giu nguyen): ";
	cin.getline(tmp, 50);
	if (strlen(tmp) > 0) strcpy(p->sv.Email, tmp);

	return true;
}
//Save và đọc File SV
void GhiFile_SV(PTRSV First, const char* filename) {
	ofstream fo(filename);
	for (nodeSV* p = First; p != NULL; p = p->next) {
		fo << p->sv.MASV << ',' << p->sv.HO << ','
		   << p->sv.TEN << ',' << p->sv.PHAI << ','
		   << p->sv.SODT << ',' << p->sv.Email << endl;
	}
	fo.close();
}
void DocFile_SV(PTRSV &First, const char* filename) {
	ifstream fi(filename);
	SinhVien sv;
	string tmp;
	while (getline(fi, tmp, ',')) {
		strcpy(sv.MASV, tmp.c_str());
		getline(fi, tmp, ','); strcpy(sv.HO, tmp.c_str());
		getline(fi, tmp, ','); strcpy(sv.TEN, tmp.c_str());
		getline(fi, tmp, ','); strcpy(sv.PHAI, tmp.c_str());
		getline(fi, tmp, ','); strcpy(sv.SODT, tmp.c_str());
		getline(fi, tmp); strcpy(sv.Email, tmp.c_str());
		ThemSV(First, sv);
	}
	fi.close();
}

//====Lớp SV====
struct LopSV  {
	char MALOP[16]; char TENLOP[51];
	PTRSV FirstSV=NULL;
};
struct DS_LOPSV {
	int n=0;
	LopSV *nodes[MAX_LOPSV];
};
//Tìm lớp sinh viên theo mã lớp
LopSV* TimKiemLopSV(DS_LOPSV &ds, const char* malop) {
	for (int i = 0; i < ds.n; i++) {
		if (strcmp(ds.nodes[i]->MALOP, malop) == 0) {
			return ds.nodes[i]; // tìm thấy lớp
		}
	}
	return NULL; // không tìm thấy
}

//Thêm lớp sinh viên vào danh sách
bool ThemLopSV(DS_LOPSV &ds, LopSV lop) {
	if (ds.n >= MAX_LOPSV) {
		cout << "Danh sach lop sinh vien da day!\n";
		return false;
	}
	if (TimKiemLopSV(ds, lop.MALOP) != NULL) {
		cout << "Ma lop da ton tai!\n";
		return false;
	}
	LopSV* p = new LopSV;
	*p = lop;
	p->FirstSV = NULL;
	ds.nodes[ds.n++] = p;
	return true;
}

//Save và đọc file LopSV
void GhiFile_LopSV(DS_LOPSV ds, const char* filename) {
	ofstream fo(filename);
	if (!fo) {
		cout << "Khong mo duoc file de ghi!\n";
		return;
	}
	for (int i = 0; i < ds.n; i++) {
		fo << ds.nodes[i]->MALOP << ',' << ds.nodes[i]->TENLOP << endl;
	}
	fo.close();
}
void DocFile_LopSV(DS_LOPSV &ds, const char* filename) {
	ifstream fi(filename);
	if (!fi) {
		cout << "Khong mo duoc file de doc!\n";
		return;
	}
	string tmp;
	LopSV lop;
	while (getline(fi, tmp, ',')) {
		strcpy(lop.MALOP, tmp.c_str());
		getline(fi, tmp);
		strcpy(lop.TENLOP, tmp.c_str());
		lop.FirstSV = NULL;
		ThemLopSV(ds, lop);
	}
	fi.close();
}
//Cập nhật sinh viên của 1 lớp
void CapNhatSV_1Lop(DS_LOPSV &ds) {
	char malop[16];
	cout << "Nhap ma lop can cap nhat SV: ";
	cin.getline(malop, 16);
	LopSV* lop = TimKiemLopSV(ds, malop);
	if (lop == NULL) {
		cout << "Khong tim thay lop!\n";
		return;
	}
	cout << "=== CAP NHAT SINH VIEN CHO LOP: " << lop->TENLOP << " ===\n";

	while (true) {
		cout << "\n1. Them SV\n2. Xoa SV\n3. Hieu chinh SV\n0. Thoat\nChon: ";
		int chon; cin >> chon; cin.ignore();
		if (chon == 0) break;

		switch (chon) {
		case 1: {
			while (true) {
				SinhVien sv;
				cout << "\nNhap ma SV (Enter de dung): ";
				cin.getline(sv.MASV, 16);
				if (strlen(sv.MASV) == 0) break; // dừng nhập
				if (TimKiemSV(lop->FirstSV, sv.MASV)) {
					cout << "Ma SV da ton tai!\n";
					continue;
				}
				cout << "Nhap ho: "; cin.getline(sv.HO, 51);
				cout << "Nhap ten: "; cin.getline(sv.TEN, 11);
				cout << "Nhap phai: "; cin.getline(sv.PHAI, 4);
				cout << "Nhap SDT: "; cin.getline(sv.SODT, 16);
				cout << "Nhap email: "; cin.getline(sv.Email, 50);
				ThemSV(lop->FirstSV, sv);
			}
			break;
		}
		case 2: {
			char masv[16];
			cout << "Nhap ma SV can xoa: ";
			cin.getline(masv, 16);
			if (XoaSV(lop->FirstSV, masv))
				cout << "Da xoa!\n";
			else
				cout << "Khong tim thay SV!\n";
			break;
		}
		case 3: {
			char masv[16];
			cout << "Nhap ma SV can hieu chinh: ";
			cin.getline(masv, 16);
			if (HieuChinhSV(lop->FirstSV, masv))
				cout << "Da cap nhat!\n";
			else
				cout << "Khong tim thay SV!\n";
			break;
		}
		default: cout << "Lua chon khong hop le!\n";
		}
	}
}
//
struct DangKy {
	char MASV[16]; float DIEM;
	bool huydangky=false;
};
struct nodeDK {
	DangKy dk;
	nodeDK *next;
};
typedef nodeDK* PTRDK;
struct LopTinChi {
	int MALOPTC;
	char MAMH[11];
	char NienKhoa[10];
	int Hocky, Nhom, sosvmin, sosvmax;
	bool huylop = false;
	PTRDK dssvdk=NULL;
};
struct nodeLopTinChi {
	LopTinChi ltc;
	nodeLopTinChi *next;
};
typedef nodeLopTinChi* PTRLTC;
 int main(){
    PTRLTC dsltc=NULL;
 	treeMH dsmh=NULL;
 	DS_LOPSV dslopsv;
 }



